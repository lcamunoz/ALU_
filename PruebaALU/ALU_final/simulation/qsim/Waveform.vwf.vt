// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/17/2022 21:58:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU_final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_final_vlg_sample_tst(
	A,
	ALU_Sel,
	B,
	sampler_tx
);
input [7:0] A;
input [2:0] ALU_Sel;
input [7:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or ALU_Sel or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU_final_vlg_check_tst (
	Display0,
	Display1,
	Display2,
	Display3,
	NZVC,
	sampler_rx
);
input [6:0] Display0;
input [6:0] Display1;
input [6:0] Display2;
input [6:0] Display3;
input [3:0] NZVC;
input sampler_rx;

reg [6:0] Display0_expected;
reg [6:0] Display1_expected;
reg [6:0] Display2_expected;
reg [6:0] Display3_expected;
reg [3:0] NZVC_expected;

reg [6:0] Display0_prev;
reg [6:0] Display1_prev;
reg [6:0] Display2_prev;
reg [6:0] Display3_prev;
reg [3:0] NZVC_prev;

reg [6:0] Display0_expected_prev;
reg [6:0] Display1_expected_prev;
reg [6:0] Display2_expected_prev;
reg [6:0] Display3_expected_prev;
reg [3:0] NZVC_expected_prev;

reg [6:0] last_Display0_exp;
reg [6:0] last_Display1_exp;
reg [6:0] last_Display2_exp;
reg [6:0] last_Display3_exp;
reg [3:0] last_NZVC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Display0_prev = Display0;
	Display1_prev = Display1;
	Display2_prev = Display2;
	Display3_prev = Display3;
	NZVC_prev = NZVC;
end

// update expected /o prevs

always @(trigger)
begin
	Display0_expected_prev = Display0_expected;
	Display1_expected_prev = Display1_expected;
	Display2_expected_prev = Display2_expected;
	Display3_expected_prev = Display3_expected;
	NZVC_expected_prev = NZVC_expected;
end


// expected Display0[ 6 ]
initial
begin
	Display0_expected[6] = 1'bX;
	Display0_expected[6] = #999000 1'b0;
end 
// expected Display0[ 5 ]
initial
begin
	Display0_expected[5] = 1'bX;
	Display0_expected[5] = #999000 1'b0;
end 
// expected Display0[ 4 ]
initial
begin
	Display0_expected[4] = 1'bX;
	Display0_expected[4] = #999000 1'b0;
end 
// expected Display0[ 3 ]
initial
begin
	Display0_expected[3] = 1'bX;
	Display0_expected[3] = #999000 1'b0;
end 
// expected Display0[ 2 ]
initial
begin
	Display0_expected[2] = 1'bX;
	Display0_expected[2] = #999000 1'b0;
end 
// expected Display0[ 1 ]
initial
begin
	Display0_expected[1] = 1'bX;
	Display0_expected[1] = #999000 1'b0;
end 
// expected Display0[ 0 ]
initial
begin
	Display0_expected[0] = 1'bX;
	Display0_expected[0] = #999000 1'b0;
end 
// expected Display1[ 6 ]
initial
begin
	Display1_expected[6] = 1'bX;
	Display1_expected[6] = #999000 1'b0;
end 
// expected Display1[ 5 ]
initial
begin
	Display1_expected[5] = 1'bX;
	Display1_expected[5] = #999000 1'b0;
end 
// expected Display1[ 4 ]
initial
begin
	Display1_expected[4] = 1'bX;
	Display1_expected[4] = #999000 1'b0;
end 
// expected Display1[ 3 ]
initial
begin
	Display1_expected[3] = 1'bX;
	Display1_expected[3] = #999000 1'b0;
end 
// expected Display1[ 2 ]
initial
begin
	Display1_expected[2] = 1'bX;
	Display1_expected[2] = #999000 1'b0;
end 
// expected Display1[ 1 ]
initial
begin
	Display1_expected[1] = 1'bX;
	Display1_expected[1] = #999000 1'b0;
end 
// expected Display1[ 0 ]
initial
begin
	Display1_expected[0] = 1'bX;
	Display1_expected[0] = #999000 1'b0;
end 
// expected Display2[ 6 ]
initial
begin
	Display2_expected[6] = 1'bX;
	Display2_expected[6] = #999000 1'b0;
end 
// expected Display2[ 5 ]
initial
begin
	Display2_expected[5] = 1'bX;
	Display2_expected[5] = #999000 1'b0;
end 
// expected Display2[ 4 ]
initial
begin
	Display2_expected[4] = 1'bX;
	Display2_expected[4] = #999000 1'b0;
end 
// expected Display2[ 3 ]
initial
begin
	Display2_expected[3] = 1'bX;
	Display2_expected[3] = #999000 1'b0;
end 
// expected Display2[ 2 ]
initial
begin
	Display2_expected[2] = 1'bX;
	Display2_expected[2] = #999000 1'b0;
end 
// expected Display2[ 1 ]
initial
begin
	Display2_expected[1] = 1'bX;
	Display2_expected[1] = #999000 1'b0;
end 
// expected Display2[ 0 ]
initial
begin
	Display2_expected[0] = 1'bX;
	Display2_expected[0] = #999000 1'b0;
end 
// expected Display3[ 6 ]
initial
begin
	Display3_expected[6] = 1'bX;
	Display3_expected[6] = #999000 1'b0;
end 
// expected Display3[ 5 ]
initial
begin
	Display3_expected[5] = 1'bX;
	Display3_expected[5] = #999000 1'b0;
end 
// expected Display3[ 4 ]
initial
begin
	Display3_expected[4] = 1'bX;
	Display3_expected[4] = #999000 1'b0;
end 
// expected Display3[ 3 ]
initial
begin
	Display3_expected[3] = 1'bX;
	Display3_expected[3] = #999000 1'b0;
end 
// expected Display3[ 2 ]
initial
begin
	Display3_expected[2] = 1'bX;
	Display3_expected[2] = #999000 1'b0;
end 
// expected Display3[ 1 ]
initial
begin
	Display3_expected[1] = 1'bX;
	Display3_expected[1] = #999000 1'b0;
end 
// expected Display3[ 0 ]
initial
begin
	Display3_expected[0] = 1'bX;
	Display3_expected[0] = #999000 1'b0;
end 
// expected NZVC[ 3 ]
initial
begin
	NZVC_expected[3] = 1'bX;
	NZVC_expected[3] = #999000 1'b0;
end 
// expected NZVC[ 2 ]
initial
begin
	NZVC_expected[2] = 1'bX;
	NZVC_expected[2] = #999000 1'b0;
end 
// expected NZVC[ 1 ]
initial
begin
	NZVC_expected[1] = 1'bX;
	NZVC_expected[1] = #999000 1'b0;
end 
// expected NZVC[ 0 ]
initial
begin
	NZVC_expected[0] = 1'bX;
	NZVC_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(Display0_expected or Display0 or Display1_expected or Display1 or Display2_expected or Display2 or Display3_expected or Display3 or NZVC_expected or NZVC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Display0 = %b | expected Display1 = %b | expected Display2 = %b | expected Display3 = %b | expected NZVC = %b | ",Display0_expected_prev,Display1_expected_prev,Display2_expected_prev,Display3_expected_prev,NZVC_expected_prev);
	$display("| real Display0 = %b | real Display1 = %b | real Display2 = %b | real Display3 = %b | real NZVC = %b | ",Display0_prev,Display1_prev,Display2_prev,Display3_prev,NZVC_prev);
`endif
	if (
		( Display0_expected_prev[0] !== 1'bx ) && ( Display0_prev[0] !== Display0_expected_prev[0] )
		&& ((Display0_expected_prev[0] !== last_Display0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display0_expected_prev);
		$display ("     Real value = %b", Display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display0_exp[0] = Display0_expected_prev[0];
	end
	if (
		( Display0_expected_prev[1] !== 1'bx ) && ( Display0_prev[1] !== Display0_expected_prev[1] )
		&& ((Display0_expected_prev[1] !== last_Display0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display0_expected_prev);
		$display ("     Real value = %b", Display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display0_exp[1] = Display0_expected_prev[1];
	end
	if (
		( Display0_expected_prev[2] !== 1'bx ) && ( Display0_prev[2] !== Display0_expected_prev[2] )
		&& ((Display0_expected_prev[2] !== last_Display0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display0_expected_prev);
		$display ("     Real value = %b", Display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display0_exp[2] = Display0_expected_prev[2];
	end
	if (
		( Display0_expected_prev[3] !== 1'bx ) && ( Display0_prev[3] !== Display0_expected_prev[3] )
		&& ((Display0_expected_prev[3] !== last_Display0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display0_expected_prev);
		$display ("     Real value = %b", Display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display0_exp[3] = Display0_expected_prev[3];
	end
	if (
		( Display0_expected_prev[4] !== 1'bx ) && ( Display0_prev[4] !== Display0_expected_prev[4] )
		&& ((Display0_expected_prev[4] !== last_Display0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display0_expected_prev);
		$display ("     Real value = %b", Display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display0_exp[4] = Display0_expected_prev[4];
	end
	if (
		( Display0_expected_prev[5] !== 1'bx ) && ( Display0_prev[5] !== Display0_expected_prev[5] )
		&& ((Display0_expected_prev[5] !== last_Display0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display0_expected_prev);
		$display ("     Real value = %b", Display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display0_exp[5] = Display0_expected_prev[5];
	end
	if (
		( Display0_expected_prev[6] !== 1'bx ) && ( Display0_prev[6] !== Display0_expected_prev[6] )
		&& ((Display0_expected_prev[6] !== last_Display0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display0_expected_prev);
		$display ("     Real value = %b", Display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display0_exp[6] = Display0_expected_prev[6];
	end
	if (
		( Display1_expected_prev[0] !== 1'bx ) && ( Display1_prev[0] !== Display1_expected_prev[0] )
		&& ((Display1_expected_prev[0] !== last_Display1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display1_exp[0] = Display1_expected_prev[0];
	end
	if (
		( Display1_expected_prev[1] !== 1'bx ) && ( Display1_prev[1] !== Display1_expected_prev[1] )
		&& ((Display1_expected_prev[1] !== last_Display1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display1_exp[1] = Display1_expected_prev[1];
	end
	if (
		( Display1_expected_prev[2] !== 1'bx ) && ( Display1_prev[2] !== Display1_expected_prev[2] )
		&& ((Display1_expected_prev[2] !== last_Display1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display1_exp[2] = Display1_expected_prev[2];
	end
	if (
		( Display1_expected_prev[3] !== 1'bx ) && ( Display1_prev[3] !== Display1_expected_prev[3] )
		&& ((Display1_expected_prev[3] !== last_Display1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display1_exp[3] = Display1_expected_prev[3];
	end
	if (
		( Display1_expected_prev[4] !== 1'bx ) && ( Display1_prev[4] !== Display1_expected_prev[4] )
		&& ((Display1_expected_prev[4] !== last_Display1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display1_exp[4] = Display1_expected_prev[4];
	end
	if (
		( Display1_expected_prev[5] !== 1'bx ) && ( Display1_prev[5] !== Display1_expected_prev[5] )
		&& ((Display1_expected_prev[5] !== last_Display1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display1_exp[5] = Display1_expected_prev[5];
	end
	if (
		( Display1_expected_prev[6] !== 1'bx ) && ( Display1_prev[6] !== Display1_expected_prev[6] )
		&& ((Display1_expected_prev[6] !== last_Display1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display1_exp[6] = Display1_expected_prev[6];
	end
	if (
		( Display2_expected_prev[0] !== 1'bx ) && ( Display2_prev[0] !== Display2_expected_prev[0] )
		&& ((Display2_expected_prev[0] !== last_Display2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display2_exp[0] = Display2_expected_prev[0];
	end
	if (
		( Display2_expected_prev[1] !== 1'bx ) && ( Display2_prev[1] !== Display2_expected_prev[1] )
		&& ((Display2_expected_prev[1] !== last_Display2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display2_exp[1] = Display2_expected_prev[1];
	end
	if (
		( Display2_expected_prev[2] !== 1'bx ) && ( Display2_prev[2] !== Display2_expected_prev[2] )
		&& ((Display2_expected_prev[2] !== last_Display2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display2_exp[2] = Display2_expected_prev[2];
	end
	if (
		( Display2_expected_prev[3] !== 1'bx ) && ( Display2_prev[3] !== Display2_expected_prev[3] )
		&& ((Display2_expected_prev[3] !== last_Display2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display2_exp[3] = Display2_expected_prev[3];
	end
	if (
		( Display2_expected_prev[4] !== 1'bx ) && ( Display2_prev[4] !== Display2_expected_prev[4] )
		&& ((Display2_expected_prev[4] !== last_Display2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display2_exp[4] = Display2_expected_prev[4];
	end
	if (
		( Display2_expected_prev[5] !== 1'bx ) && ( Display2_prev[5] !== Display2_expected_prev[5] )
		&& ((Display2_expected_prev[5] !== last_Display2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display2_exp[5] = Display2_expected_prev[5];
	end
	if (
		( Display2_expected_prev[6] !== 1'bx ) && ( Display2_prev[6] !== Display2_expected_prev[6] )
		&& ((Display2_expected_prev[6] !== last_Display2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display2_exp[6] = Display2_expected_prev[6];
	end
	if (
		( Display3_expected_prev[0] !== 1'bx ) && ( Display3_prev[0] !== Display3_expected_prev[0] )
		&& ((Display3_expected_prev[0] !== last_Display3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display3_exp[0] = Display3_expected_prev[0];
	end
	if (
		( Display3_expected_prev[1] !== 1'bx ) && ( Display3_prev[1] !== Display3_expected_prev[1] )
		&& ((Display3_expected_prev[1] !== last_Display3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display3_exp[1] = Display3_expected_prev[1];
	end
	if (
		( Display3_expected_prev[2] !== 1'bx ) && ( Display3_prev[2] !== Display3_expected_prev[2] )
		&& ((Display3_expected_prev[2] !== last_Display3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display3_exp[2] = Display3_expected_prev[2];
	end
	if (
		( Display3_expected_prev[3] !== 1'bx ) && ( Display3_prev[3] !== Display3_expected_prev[3] )
		&& ((Display3_expected_prev[3] !== last_Display3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display3_exp[3] = Display3_expected_prev[3];
	end
	if (
		( Display3_expected_prev[4] !== 1'bx ) && ( Display3_prev[4] !== Display3_expected_prev[4] )
		&& ((Display3_expected_prev[4] !== last_Display3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display3_exp[4] = Display3_expected_prev[4];
	end
	if (
		( Display3_expected_prev[5] !== 1'bx ) && ( Display3_prev[5] !== Display3_expected_prev[5] )
		&& ((Display3_expected_prev[5] !== last_Display3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display3_exp[5] = Display3_expected_prev[5];
	end
	if (
		( Display3_expected_prev[6] !== 1'bx ) && ( Display3_prev[6] !== Display3_expected_prev[6] )
		&& ((Display3_expected_prev[6] !== last_Display3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display3_exp[6] = Display3_expected_prev[6];
	end
	if (
		( NZVC_expected_prev[0] !== 1'bx ) && ( NZVC_prev[0] !== NZVC_expected_prev[0] )
		&& ((NZVC_expected_prev[0] !== last_NZVC_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZVC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZVC_expected_prev);
		$display ("     Real value = %b", NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NZVC_exp[0] = NZVC_expected_prev[0];
	end
	if (
		( NZVC_expected_prev[1] !== 1'bx ) && ( NZVC_prev[1] !== NZVC_expected_prev[1] )
		&& ((NZVC_expected_prev[1] !== last_NZVC_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZVC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZVC_expected_prev);
		$display ("     Real value = %b", NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NZVC_exp[1] = NZVC_expected_prev[1];
	end
	if (
		( NZVC_expected_prev[2] !== 1'bx ) && ( NZVC_prev[2] !== NZVC_expected_prev[2] )
		&& ((NZVC_expected_prev[2] !== last_NZVC_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZVC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZVC_expected_prev);
		$display ("     Real value = %b", NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NZVC_exp[2] = NZVC_expected_prev[2];
	end
	if (
		( NZVC_expected_prev[3] !== 1'bx ) && ( NZVC_prev[3] !== NZVC_expected_prev[3] )
		&& ((NZVC_expected_prev[3] !== last_NZVC_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZVC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZVC_expected_prev);
		$display ("     Real value = %b", NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NZVC_exp[3] = NZVC_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU_final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [2:0] ALU_Sel;
reg [7:0] B;
// wires                                               
wire [6:0] Display0;
wire [6:0] Display1;
wire [6:0] Display2;
wire [6:0] Display3;
wire [3:0] NZVC;

wire sampler;                             

// assign statements (if any)                          
ALU_final i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ALU_Sel(ALU_Sel),
	.B(B),
	.Display0(Display0),
	.Display1(Display1),
	.Display2(Display2),
	.Display3(Display3),
	.NZVC(NZVC)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// ALU_Sel[ 2 ]
initial
begin
	ALU_Sel[2] = 1'b0;
end 
// ALU_Sel[ 1 ]
initial
begin
	ALU_Sel[1] = 1'b0;
end 
// ALU_Sel[ 0 ]
initial
begin
	ALU_Sel[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

ALU_final_vlg_sample_tst tb_sample (
	.A(A),
	.ALU_Sel(ALU_Sel),
	.B(B),
	.sampler_tx(sampler)
);

ALU_final_vlg_check_tst tb_out(
	.Display0(Display0),
	.Display1(Display1),
	.Display2(Display2),
	.Display3(Display3),
	.NZVC(NZVC),
	.sampler_rx(sampler)
);
endmodule

